// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Form {
    id           String         @id @default(cuid())
    createdAt    DateTime       @default(now())
    updatedAt    DateTime       @updatedAt
    name         String
    creator      User           @relation(fields: [userId], references: [id])
    userId       String
    blocks       Block[]
    FormResponse FormResponse[]
}

model FormResponse {
    id        Int                   @id @default(autoincrement())
    createdAt DateTime              @default(now())
    updatedAt DateTime              @default(now())
    // props here
    form      Form                  @relation(fields: [formId], references: [id])
    formId    String
    responses FormResponseAnswers[]
    name      String
    email     String
}

model FormResponseAnswers {
    id             Int           @id @default(autoincrement())
    createdAt      DateTime      @default(now())
    updatedAt      DateTime      @default(now())
    // props here
    response       String
    formResponse   FormResponse? @relation(fields: [formResponseId], references: [id])
    formResponseId Int?
    block          Block         @relation(fields: [blockId], references: [id])
    blockId        String
}

// enum BlockType {
//     TEXT
//     MULTIPLE_CHOICE
//     SINGLE_SELECT
//     MULTIPLE_SELECT
//     EMAIL
//     URL
// }

model Block {
    id                  String                @id @default(cuid())
    createdAt           DateTime              @default(now())
    updatedAt           DateTime              @default(now())
    // props here
    type                String                @default("text")
    question            String                @default("")
    form                Form                  @relation(fields: [formId], references: [id])
    formId              String
    countInOrder        Int
    FormResponseAnswers FormResponseAnswers[]
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    refresh_token_expires_in Int
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    Form          Form[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
